openapi: '3.0.0'
info:
  title: Dynamic Schemas RESTful API
  description: API for interacting with application
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Local server
paths:
  # ***********
  # * TENANTS *
  # ***********
  /tenants/{id}:
    get:
      summary: Gets a Tenant by ID
      description: Returns a found Tenant object by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the Tenant to retrieve
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        500:
          description: Internal Server Error
          content: {}

  /tenants:
    post:
      summary: Creates a Tenant
      description: Returns a newly created Tenant object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of Tenant
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        500:
          description: Internal Server Error
          content: {}

  # ***********
  # * SCHEMAS *
  # ***********
  /schemas/{name}:
    get:
      summary: Gets a Schema by ID
      description: Returns a found Schema object by ID
      parameters:
        - name: name
          in: path
          schema:
            type: string
          required: true
          description: Name of the Schema to retrieve
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
        500:
          description: Internal Server Error
          content: {}

  # ***************
  # * COLLECTIONS *
  # ***************
  /collections/{schemaName}:
    get:
      summary: Gets a list of Collections
      description: Returns a list Collection objects
      parameters:
        - name: schemaName
          in: path
          schema:
            type: string
          required: true
          description: Name of Schema to which the Collection belongs

      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collections'
        500:
          description: Internal Server Error
          content: {}

  /collections/{schemaName}/{name}:
    get:
      summary: Gets a Collection by name
      description: Returns a found Collection object by name
      parameters:
        - name: schemaName
          in: path
          schema:
            type: string
          required: true
          description: Name of Schema to which the Collection belongs

        - name: name
          in: path
          schema:
            type: string
          required: true
          description: Name of collection

      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        500:
          description: Internal Server Error
          content: {}

  /collections:
    post:
      summary: Creates a Collection
      description: Returns a newly created Document object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schemaName:
                  type: string
                  description: Name of Schema to which the Collection belongs
                  required: true

                name:
                  type: string
                  description: Name of Collection
                  required: true

                createPropertyPayloads:
                  schema:
                    type: array
                    description: List of payload to create Properties
                    required: true
                    items:
                      properties:
                        name:
                          type: string
                          description: Name of Property
                        type:
                          type: string
                          description: Type of Property
                        isRequired:
                          type: boolean
                          description: Marks a Property has required
                        itemType:
                          type: string
                          description: Type of each item if Property is of type array
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        500:
          description: Internal Server Error
          content: {}

  # *************
  # * DOCUMENTS *
  # *************
  /documents/{schemaName}/{collectionName}:
    get:
      summary: Gets a list of Documents
      description: Returns a list Document object
      parameters:
        - name: schemaName
          in: path
          schema:
            type: string
          required: true
          description: Name of Schema to which the Collection the Document belongs

        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          description: Name of collection to which the Document belongs
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Documents'
        500:
          description: Internal Server Error
          content: {}

  /documents/{schemaName}/{collectionName}/{key}:
    get:
      summary: Gets a Document by Key
      description: Returns a found Document object by Key
      parameters:
        - name: schemaName
          in: path
          schema:
            type: string
          required: true
          description: Name of Schema to which the Collection the Document belongs

        - name: collectionName
          in: path
          schema:
            type: string
          required: true
          description: Name of collection to which the Document belongs

        - name: key
          in: path
          schema:
            type: string
          required: true
          description: Key of Document to retrieve
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        500:
          description: Internal Server Error
          content: {}

  /documents:
    post:
      summary: Creates a Document
      description: Returns a newly created Document object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                schemaName:
                  type: string
                  description: Name of Schema to which the Collection of the Document belongs
                  required: true

                collectionName:
                  type: string
                  description: Name of Collection to which the Document belongs
                  required: true

                body:
                  type: object
                  description: Body of the Document
                  required: true
      responses:
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        500:
          description: Internal Server Error
          content: {}   
components:
  schemas:
    # ***********
    # * TENANTS *
    # ***********
    Tenant:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique identifier of the Tenant
        name:
          type: string
          description: Name of the Tenant
  
    # ***********
    # * SCHEMAS *
    # ***********
    Schema:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Unique identifier of the Schema
        name:
          type: string
          description: Name of the Schema

    # ***************
    # * COLLECTIONS *
    # ***************
    Property:
      type: object
      required:
        - name
        - type
        - isRequired
        - itemType
      properties:
        name:
          type: string
          description: Name of Property
        type:
          type: string
          description: Type of Property
        isRequired:
          type: boolean
          description: Marks a Property has required
        itemType:
          type: string
          description: Type of each item if Property is of type array

    Collection:
      type: object
      required:
        - name
        - properties
      properties:
        name:
          type: string
          description: Name of Collection
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'

    Collections:
      type: array
      items:
        $ref: '#/components/schemas/Collection'

    # *************
    # * DOCUMENTS *
    # *************
    Document:
      type: object
      required:
        - key
        - body
      properties:
        key:
          type: string
          description: Unique identifier of the Document
        body:
          type: object
          description: Body of the Document

    Documents:
      type: array
      items:
        $ref: '#/components/schemas/Document'